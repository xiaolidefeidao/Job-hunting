<tbody>…</tbody>：当表格内容非常多时，表格会下载一点显示一点，但如果加上<tbody>标签后，这个表格就要等表格内容全部下载完才会显示。
如果您使用 thead、tfoot 以及 tbody 元素，您就必须使用全部的元素。它们的出现次序是：thead、tfoot、tbody，这样浏览器就可以在收到所有数据前呈现页脚了。您必须在 table 元素内部使用这些标签。
摘要:
摘要的内容是不会在浏览器中显示出来的。它的作用是增加表格的可读性(语义化)，使搜索引擎更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容。
    语法：<table summary="表格简介文本">
标题:
用以描述表格内容，标题的显示位置：表格上方。
    语法：
<table>
    <caption>标题文本</caption>
    <tr>
        <td>…</td>
        <td>…</td>
        …
    </tr>
…
</table>
为什么<table>在实践中渐渐被<div>取代??
1.在开发过程中，当表格展示大量数据的时候，页面性能下降得厉害，不要用tables布局的一个原因就是tables中某个元素一旦触发reflow就会导致table里所有的其它元素reflow。
在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。
2.table可以很容易建立起结构化的界面，通过table自身的参数定义，我们能把页面布局很快定义成我们所需要的效果。当然css的配合就可以相对减少。
缺点就是扩展性和可读性相对较差，扩展性差表现在维护和修正上面，一个复杂的table布局的site，她的海量页面在随着需求变化下，开发人员将一筹莫展，
大量的修改需求会把web的界面开发工作彻底粉碎。可读性差，这个也是相对来说。div布局更加灵活，能简单也能够复杂。相同的显示效果在css和div的配合上
可以产生不同的搭配方式。扩展性强是她的优点，开发设计人员只要对相应的css做调整就能让布局焕然一新，这点是table远远不及的。但在对结构相对复杂
的局部，往往div+css开发难度高，一个简单效果div和css要写半天。
3.table和div在兼容问题中，table更具有优势。
#http://www.jb51.net/web/10451.html
