	当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。
	web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，
而此时 web worker 在后台运行。
	传统页面中（HTML5 之前）的 JavaScript 的运行都是以单线程的方式工作的，虽然有多种方式实现了对多线程的模拟(异步，事件轮询)（例如：JavaScript 中的
setinterval 方法，setTimeout 方法等），但是在本质上程序的运行仍然是由 JavaScript 引擎以单线程调度的方式进行的。在 HTML5 中引入
的工作线程使得浏览器端的 JavaScript 引擎可以并发地执行 JavaScript 代码，从而实现了对浏览器端多线程编程的良好支持。
专用线程：Dedicated Worker
<!DOCTYPE html>
<!--demo_workers.html-->
<html>
<body>
<p>计数: <output id="result"></output></p>
<button onclick="startWorker()">开始 Worker</button> 
<button onclick="stopWorker()">停止 Worker</button>
<br /><br />
<script>
var w;
function startWorker()
{
if(typeof(Worker)!=="undefined")
  {
  if(typeof(w)=="undefined")
  {
  w=new Worker("demo_workers.js");
  }
  w.onmessage = function (event) {           //此处用的onmessage更专业，使用addEventListener方法也可以接收数据
    document.getElementById("result").innerHTML=event.data;
    };
  }
else
  {
  document.getElementById("result").innerHTML="Sorry, your browser does not support Web Workers...";
  }
}
function stopWorker()
{ 
w.terminate();
}
</script>
</body>
</html>
//以下是demo_workers.js;******************在这里是无法操作DOM的，没有DOM对象*******************
//这里可以使用onmessage接收页面传过来的数据onmessage=function(event){//"your code"}
var i=0;
function timedCount()
{
i=i+1;
postMessage(i);
setTimeout("timedCount()",500);
}
timedCount();

共享线程 Shared Worker
//这个构造函数SharedWorker使用 URL 作为第一个参数，即是指向 JavaScript 资源文件的 URL，同时，
//如果开发人员提供了第二个构造参数，那么这个参数将被用于作为这个共享线程的名称。
var worker = new SharedWorker('sharedworker.js', ’ mysharedworker ’ );
 // 从端口接收数据 , 包括文本数据以及结构化数据
 1. worker.port.onmessage = function (event) { define your logic here... }; 
 // 向端口发送普通文本数据
 2. worker.port.postMessage('put your message here … '); 
 // 向端口发送结构化数据
 3. worker.port.postMessage({ username: 'usertext'; live_city: 
 ['data-one', 'data-two', 'data-three','data-four']});
