一、XSS跨站脚本攻击(Cross Site Scripting)；防御：
    1、  输入检查、输出检查——HTMLEncode（jquery的text()、html()）、JavaScriptEncode
        //<h1>hello!</h1>它的innerHTML和innerText都是hello!
        //<h1>hello!<b>asdfasdf</b></h1>它的innerHTML是hello!<b>asdfasdf</b>;它的innerText是hello!asdfasdf
    2、  防御DOM Based XSS ——先做输出检查，若输出到HTML做HTMLEncode；若输出到事件、JS，做JavaScriptEncode
function htmlEncode ( str ) {
    var _str = '';
    if ( str.length == 0 ) return '';
    _str = str .replace(/&/g, "&");
    _str = _str.replace(/</g, "&lt;");
    _str = _str.replace(/>/g, "&gt;");
    _str = _str.replace(/"/g, "&quot;");
    _str = _str.replace(/ /g, "&nbsp;");
    return _str;
}
function htmlDecode ( str ) {
    var _str = '';
    if ( str.length == 0 ) return '';
    _str = str .replace(/&/g, '&amp;');
    _str = _str.replace(/&lt;/g, '<');
    _str = _str.replace(/&gt;/g, '>');
    _str = _str.replace(/&quot;/g, '"');
    _str = _str.replace(/&nbsp;/g, ' ');
    return _str;
}
        //使用XSS劫持cookie
二、Csrf跨站请求伪造(Cross-site request forgery);防御：
    token、验证码（静态图片或gif图片、语音验证码、短信验证码）。
    Token一般用在两个地方:
    1)防止表单重复提交、
    2)anti csrf攻击（跨站点请求伪造）。
        两者在原理上都是通过session token来实现的。当客户端请求页面时，服务器会生成一个随机数Token，并且将Token放置到session当中，
    然后将Token发给客户端（一般通过构造hidden表单）。下次客户端提交请求时，Token会随着表单一起提交到服务器端。
        如果应用于“anti csrf攻击”，则服务器端会对Token值进行验证，判断是否和session中的Token值相等，若相等，则可以证明请求有效，不是伪造的。
    不过，如果应用于“防止表单重复提交”，服务器端第一次验证相同过后，会将session中的Token值更新下，若用户重复提交，第二次的验证判断将失败，
    因为用户提交的表单中的Token没变，但服务器端session中Token已经改变了。

XSS是利用站点内的信任用户，发起攻击。
CSRF通过伪装成来自受信任用户的请求来利用网站。
