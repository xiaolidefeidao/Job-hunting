为什么说eval、with、catch很邪恶呢，因为它们会破坏（扩大）作用域链，with会先在__proto__链寻找变量，再从__parent__链寻找变量，若是都没找到即undefined.
eval可以把调用上下文作为第二个参数传递给eval。
with声明和catch语句。它们添加到作用域链的最前端.
var x = 10, y = 10;
with ({x: 20}) {
    var x = 30, y = 30;
    console.log(x); // 30
    console.log(y); // 30
}
console.log(x); // 10
console.log(y); // 30
1. x = 10, y = 10;
2. 对象{x:20}添加到作用域的前端;
3. 在with内部，遇到了var声明，当然什么也没创建，因为在进入上下文时，所有变量已被解析添加;
4. 在第二步中，仅修改变量“x”，实际上对象中的“x”现在被解析，并添加到作用域链的最前端，“x”为20，变为30;
5. 同样也有变量对象“y”的修改，被解析后其值也相应的由10变为30;
6. 此外，在with声明完成后，它的特定对象从作用域链中移除（已改变的变量“x”－－30也从那个对象中移除），即作用域链的结构恢复到with得
到加强以前的状态。
7. 在最后两个console.log中，当前变量对象的“x”保持同一，“y”的值现在等于30，在with声明运行中已发生改变。

变量对象(variable object) 是与执行上下文相关的数据作用域(scope of data) 。
它是与上下文关联的特殊对象，用于存储被定义在上下文中的变量(variables) 和函数声明(function declarations) 。
当函数被调用者激活，这个特殊的活动对象(activation object) 就被创建了。它包含普通参数(formal parameters) 与特殊参数(arguments)对象(具有索引
属性的参数映射表)。活动对象在函数上下文中作为变量对象使用。
即：函数的变量对象保持不变，但除去存储变量与函数声明之外，还包含一个特殊对象arguments 。
变量声明在顺序上跟在函数声明和形式参数声明之后，而且在这个进入上下文阶段，变量声明(没有赋值)不会干扰VO中已经存在的同名函数声明或形式参数声明.
// 全局变量 "x"
var x = 10;
// 全局function
function foo() {
    console.log(x);
}
(function (funArg) {
// 局部变量 "x"
    var x = 20;
// 这不会有歧义
// 因为我们使用"foo"函数的[[Scope]]里保存的全局变量"x",
// 并不是caller作用域的"x"
    funArg(); // 10, 而不是20
})(foo); // 将foo作为一个"funarg"传递下去

var data = [];
for (var k = 0; k < 3; k++) {
    data[k] = function () {
        console.log(k);
    };
}
data[0](); // 3, but not 0
data[1](); // 3, but not 1//当前ECMAScript规范指出独立作用域只能通过“函数(function)”代码类型的执行上下文创建。
data[2](); // 3, but not 2;因为所有函数共享同一个[[Scope]]，其中循环变量为最后一次赋值。
解决办法：其中一种技巧是在作用域链中提供一个额外的对象，比如增加一个函数：
var data = [];
for (var k = 0; k < 3; k++) {
    data[k] = (function (x) {
        return function () {
            alert(x);
        };
    })(k); // 将k当做参数传递进去
}
// 结果正确
data[0](); // 0
data[1](); // 1
data[2](); // 2

