function Animal(name) {
    this.name = name;
    this.showName = function () {
        console.log(this.name);
    };
}
//继承方式一：call、apply
function Cat(name) {
    //this.name='name'; 这句话与它的位置有关，被下面的call方法覆盖
    Animal.call(this, 'cat-animal');//最好时是放在第一句
    //this.name='name'; 这句话与它的位置有关，覆盖上方的call方法
}

function Dog(name) {
    Animal.apply(this, name);
}
//继承方式二：prototype
function Pig(name) {
    this.name=name;
}
//Pig.prototype=new Animal('Animal');//'Animal'会被覆盖
Pig.prototype=new Animal();
//继承方式三：构造函数继承
//实现原理:让父类的构造函数成为子类的方法,然后调用该子类的方法,通过this关键字给所有的属性和方法赋值
function Sheep(name){
    this.constructor=Animal;
    this.constructor(name);
    delete this.constructor;
}

var sheep=new Sheep("sheep");
sheep.showName();//sheep
var cat = new Cat("Black Cat"); 
var dog = new Dog(["Black Dog"]); //apply必须是array
var pig = new Pig('Little Pig');
console.log(cat instanceof Cat);//true
console.log(dog instanceof Animal);//false
cat.showName();//Black Cat
dog.showName();//Black Dog
pig.showName();//Little Pig，沿着原型链向上查找



var a={x:10,y:20};
var b={z:30};
b.__proto__=a
console.log(b.x)//10
console.log(b.y)//20
