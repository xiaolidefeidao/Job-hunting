#http://juicer.name/docs/docs_zh_cn.html
名字的由来:
 倘若我们把数据比作新鲜可口的水果，把模板看做是水，Juicer 就是把水果和水榨出我们需要的HTML代码片段的榨汁机。
  出于安全角度的考虑，${变量} 在输出之前会对其内容进行转义，如果你不想输出结果被转义，可以使用 $${变量} 来避免这种情况。这一点让我联想到防御
  XSS攻击，进行HTMLencode
  //http://ued.taobao.org/blog/2012/04/juicer-%E4%B8%80%E4%B8%AAjavascript%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E4%BC%98%E5%8C%96/
我个人认为一个完善的模板引擎应该兼顾这几点：
语法简明
执行效率高（将一个模板编译后会默认缓存；遍历的时候可以做if判断，可获得index索引值；可无限级嵌套）
安全性
错误处理机制（Juicer在遇到错误的时候不会影响后续代码的执行，只会在控制台打出一句警告(Warn)告知开发者模板解析出现错误。）
多语言通用性
Juicer对一个模板的编译和渲染的过程主要有以下几个步骤：

1、对模板代码进行语法分析
2、分析后生成原生的Javascript代码字符串
3、将生成的代码转为可重用的Function (Compiled Template)
