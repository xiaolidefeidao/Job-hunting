一、使用CORS机制
    在服务器端添加一个header (Access-Control-Allow-Origin:{域名//*号代表响应任何主机的请求})
客户端：
function getHello() {
var xhr = new XMLHttpRequest();
xhr.open("post", "http://b.example.com/Test.ashx", true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");//在POST方法中设置，GET方法中设置了不起作用的
// 声明请求源
xhr.setRequestHeader("Origin", "http://a.example.com");
xhr.onreadystatechange = function () {
if (xhr.readyState == 4 && xhr.status == 200) {
var responseText = xhr.responseText;
console.log(responseText);
}
}
xhr.send();
}
服务端：
public class Test : IHttpHandler
{
public void ProcessRequest(HttpContext context)
{
context.Response.ContentType = "text/plain";
// 声明接受所有域的请求
context.Response.AddHeader("Access-Control-Allow-Origin", "*");
context.Response.Write("Hello World");
}
public bool IsReusable
{
get
{
return false;
}
}
}
二、使用JSONP
    JSONP即：json padding,使用<script>标签且只能发送'get'请求。
    机制：客户端定义回调函数callback(函数名可自定义，不一定取名callback)，函数名添加在URL发送给服务器(jquery AJAX:jsonp)；
          服务器返回一个包装过的json数据—callback({key1:value1,...}),json数据作为参数返回，客户端在回调函数内操作这些数据。
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" > 
<head> 
<title>Test Jsonp</title> 
<script type="text/javascript"> 
function jsonpCallback(result) 
{ 
alert(result.msg); 
} 
</script> 
<script type="text/javascript" src="http://crossdomain.com/jsonServerResponse?jsonp=jsonpCallback"></script> 
</head> 
<body> 
</body> 
</html> 

其中 jsonCallback 是客户端注册的，获取跨域服务器上的json数据后，回调的函数。http://crossdomain.com/jsonServerResponse?jsonp=jsonpCallback 这个 url 
是跨域服务器取 json 数据的接口，参数为回调函数的名字，返回的格式为：jsonpCallback({msg:'this is json data'}) 
简述原理与过程：首先在客户端注册一个callback, 然后把callback的名字传给服务器。此时，服务器返回一个包装过的json数据—callback({key1:value1,...}),json数据作为参数返回，客户端在回调函数内操作这些数据。
三、HTML5的postMessage、onmessage方法
    详见： http://supercharles888.blog.51cto.com/609344/857637
    存在sender.html和receiver.html两个网页，使用<iframe>标签将receiver.html嵌入sender.html；
    window.iframes[0].postMessage(data,"http://receiver:port");//window是sender.html
    window.addEventListener("message",function(event){         //window是receiver.html
        if(event.origin !="http://sender:port"){ 
            console.log("the event doesn't come from sender!"); 
            return;｝
        //操作数据event.data
        //更新DOM
        ｝,false     //参数useCapture控制触发顺序，默认值为false.
                    //事件流的三个阶段：捕获阶段、目标阶段、冒泡阶段。在节点中true（在捕获阶段触发）总比false（在冒泡阶段触发）先触发
    ｝
    
  
